﻿namespace Appointment;


/**
Saffari, K.(2024). ClassProject003.GitHub.https://github.com/saffarizadeh/ClassProject003/blob/development/Program.cs

ChatGPT, OpenAI. "Scheduler." Generated by ChatGPT, 2 May. 2024. Code.

Prompt: note: most of my prompts were sections of the code
- example
class Program
{
    private static Users users;
    private static List<Appt> appointments;
    private static List<UserAppt> userAppointments;
    private static User authenticatedUser;

    static void Main(string[] args)
    {
        Console.WriteLine("Initializing...");
        Initialize();
        Menu();
    }
Prompt: Based on the code provdied, how can I add a feature that allows the user to select a college?
Prompt: How to add feature that allows users to select an advisor

ChatGPT, OpenAI. "Appointments." Generated by ChatGPT, 2 May. 2024. Code.
* note: more error checks
Prompt:  Why is this causing an error?
Prompt: How can I fix the errors?
Prompt:  If I have errors in my code, what should I look for in my code?

**/
class Program
{
    //  Declare static variables to hold user-related data and the authenticated user.
    private static Users users;
    private static List<Appt> appointments;
    private static List<UserAppt> userAppointments;
    private static User authenticatedUser;

    static void Main(string[] args)
    {
        // Display a message indicating the initialization process.

        Console.WriteLine("Initializing...");
                // Call the Initialize method to set up users, appointments, and user-appointment associations.

        Initialize();
                // Call the Menu method to display the program's menu and start the interaction.

        Menu();
    }
      // Method to initialize users, appointments, and user-appointment associations.

    static void Initialize()
    {
         // Create instances of users.

        var c1 = new User
        {
            FirstName = "Kambiz",
            LastName = "Saffari",
            Username = "kambiz",
            Password = "1234"
        };

        var c2 = new User
        {
            FirstName = "Jeremy",
            LastName = "Lee",
            Username = "jlee",
            Password = "9876"
        };
        // Create instances of appointments.

        var a1 = new Appt();
        var a2 = new Appt();
        var a3 = new Appt();

        // Create instances of user-appointment associations.


        var ca1 = new UserAppt(c1, a1);
        var ca2 = new UserAppt(c1, a2);
        var ca3 = new UserAppt(c2, a3);

        // Initialize the users container and add users to it.


        users = new Users();
        users.userList.Add(c1);
        users.userList.Add(c2);

        
        // Initialize the userAppointments list and add user-appointment associations to it.

        userAppointments = new List<UserAppt>();
        userAppointments.Add(ca1);
        userAppointments.Add(ca2);
        userAppointments.Add(ca3);

            // Initialize the appointments list and add appointments to it.
        appointments = new List<Appt>();
        appointments.Add(a1);
        appointments.Add(a2);
        appointments.Add(a3);

    }

   // Method to display the program's menu and handle user input.
    static void Menu()
    {
        bool done = false;

        // Display the menu until the user decides to quit.
        while (!done)
        {
            // Display menu options.
            Console.WriteLine("Options: Login: 1, Logout: 2, Sign Up: 3, Appointments: 4, Quit: q");
            Console.Write("Choice: ");
            string choice = Console.ReadLine();
                    
            // Handle user's choice.
            switch(choice)
            {
                case "1":
                    LoginMenu(); // Call LoginMenu method for handling login.
                    break;
                case "2":
                    LogOutMenu(); // Call LogOutMenu method for handling logout.
                    break;
                case "3":
                    SignUpMenu(); // Call SignUpMenu method for handling sign up.
                    break;
                case "4":
                    AppointmentsMenu(); // Call AppointmentsMenu method for handling appointments.
                    break;
                case "q":
                    done = true; // Set done to true to exit the loop and terminate the program.
                    break;
                default:
                    Console.WriteLine("Invalid command!"); // Display a message for invalid commands.
                    break;
            }

        }


    }

    static void LoginMenu()
    {
            // Check if there is no authenticated user.

        if(authenticatedUser == null)
        {
            // Prompt the user to enter their username and password.

            Console.Write("Enter your username: ");
            string username = Console.ReadLine();
            Console.Write("Enter your password: ");
            string password = Console.ReadLine();

        // Attempt to authenticate the user using the provided username and password.

            authenticatedUser= users.Authenticate(username, password);

        // If authentication is successful, greet the user with their first name.

            if (authenticatedUser != null)
            {
                Console.WriteLine($"Welcome {authenticatedUser.FirstName}");
            }
        // If authentication fails, notify the user about invalid credentials.

            else
            {
                Console.WriteLine("Invalid username or password");
            }
        }


    }

    static void LogOutMenu()
    {
    // Reset the authenticated user to null, effectively logging out the user.

        authenticatedUser = null;
        Console.WriteLine("Logged out!");
    }

    static void SignUpMenu()
    {
    // Prompt the user to enter their first name, last name, username, and password.

        Console.Write("First Name: ");
        string firstname = Console.ReadLine();
        Console.Write("Last Name: ");
        string lastname = Console.ReadLine();
        Console.Write("Username: ");
        string username = Console.ReadLine();
        Console.Write("Password: ");
        string password = Console.ReadLine();

    // Create a new User object with the provided information.

        var newCustomer = new User
        {
            FirstName = firstname,
            LastName = lastname,
            Username = username,
            Password = password
        };
    // Add the new user to the list of users.

        users.userList.Add(newCustomer);
     // Notify the user that their profile has been created.

        Console.WriteLine("Profile created!");
        
    }

    static void AppointmentsMenu()
    {
     // Check if there is no authenticated user.

        if (authenticatedUser == null)
        {
    // Prompt the user to log in first.

            Console.WriteLine("Please log in first!");
            return;
        }

     // List of colleges.

         var colleges = new List<string>
        {
            "Helen Way Klingler College of Arts and Sciences",
            "College of Business Administration",
            "J. William and Mary Diederich College of Communication",
            "College of Education",
            "College of Engineering",
            "College of Health Sciences",
            "College of Nursing"
        };

    // Display the list of colleges to the user.

        Console.WriteLine("Colleges:");
        for (int i = 0; i < colleges.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {colleges[i]}");

        }

        // Get user selection of college
        Console.Write("Enter college number (1-7): ");
        string input = Console.ReadLine();
        if (int.TryParse(input, out int selection) && selection >= 1 && selection <= 7)
        {
            string selectedCollege = colleges[selection - 1];
            Console.WriteLine($"You selected: {selectedCollege}");

            // Display advisors associated with the selected college
            DisplayAdvisors(selectedCollege);

            // Prompt user to select an advisor
        Console.Write("Enter advisor's name: ");
        string advisorName = Console.ReadLine();

        // Check if the entered advisor exists for the selected college
        var advisorsByCollege = GetAdvisorsByCollege();
        if (advisorsByCollege.ContainsKey(selectedCollege) && advisorsByCollege[selectedCollege].Contains(advisorName))
        {
            // Display availability for the selected advisor
            DisplayAvailability(selectedCollege, advisorName);
        }
        else
        {
         // Notify the user about an invalid advisor name.

            Console.WriteLine("Invalid advisor name!");
        }
    }
    else
    {
        // Notify the user about an invalid selection.

        Console.WriteLine("Invalid selection!");
    }

    // Retrieve appointments for the authenticated user.

    var appointmentList = userAppointments.Where(o => o.u.Username == authenticatedUser.Username);
    if (appointmentList.Count() == 0)
    {
    // Notify the user if no appointments are found.

        Console.WriteLine("0 appointments found.");
    }
    else
    {
    // Display appointments for the authenticated user.

        Console.WriteLine("Your Appointment:");
        foreach (var appointment in appointmentList)
        {
            Console.WriteLine(appointment.a.dateTime);
        }
    }
}
// Notes: In the future, we would like to add an element where the user is able to see a list of times and select them.
// However, we were unable to take this out because it caused an error. Other than that, the part above ^ wil have revisions later.
    
 // Method to retrieve advisors by college.

    static Dictionary<string, List<string>> GetAdvisorsByCollege()
    {
            return new Dictionary<string, List<string>>
            {
            ["Helen Way Klingler College of Arts and Sciences"] = new List<string> { "Mr. Michael O'Brien", "Mr. John Fenelon", "Ms. Emily Smith" },
            ["College of Business Administration"] = new List<string> { "Ms. Sarah Johnson", "Mr. Robert Davis", "Ms. Lisa Anderson" },
            ["J. William and Mary Diederich College of Communication"] = new List<string> { "Ms. Laura Taylor", "Mr. David Wilson", "Ms. Samantha Brown" },
            ["College of Education"] = new List<string> { "Ms. Jennifer Lee", "Mr. Matthew Clark", "Ms. Elizabeth Martinez" },
            ["College of Engineering"] = new List<string> { "Mr. Kevin White", "Ms. Amanda Taylor", "Mr. Brian Adams" },
            ["College of Health Sciences"] = new List<string> { "Dr. Rachel Smith", "Ms. Jessica Wilson", "Dr. Andrew Johnson" },
            ["College of Nursing"] = new List<string> { "Dr. Lisa Garcia", "Ms. Megan Anderson", "Dr. James Thompson" }
            };

            }

// Method to display advisors for a given college.

    static void DisplayAdvisors(string college)
    {
         // Retrieve advisors by college.

        var advisorsByCollege = GetAdvisorsByCollege();
    
    // Check if advisors exist for the selected college.

        if (advisorsByCollege.ContainsKey(college))
        {
    // Display advisors for the selected college.

            var advisors = advisorsByCollege[college];
            Console.WriteLine("Advisors:");
            foreach (var advisor in advisors)
            {
                Console.WriteLine(advisor);
            }
        }
        else
        {
            // Notify the user if no advisors are found for the selected college.

            Console.WriteLine("No advisors found for the selected college.");
        }
    }
    // Method to display availability for a given advisor in a college.
    static void DisplayAvailability(string college, string advisorName)
    {
        // Placeholder availability schedule
        Console.WriteLine($"Availability for {advisorName} in {college}:");
        Console.WriteLine("Availability for the week:");
        Console.WriteLine("Monday: 9:00 AM - 5:00 PM");
        Console.WriteLine("Tuesday: 9:00 AM - 5:00 PM");
        Console.WriteLine("Wednesday: 9:00 AM - 5:00 PM");
        Console.WriteLine("Thursday: 9:00 AM - 5:00 PM");
        Console.WriteLine("Friday: 9:00 AM - 5:00 PM");
        Console.WriteLine("Saturday: Not available");
        Console.WriteLine("Sunday: Not available");
    }
}